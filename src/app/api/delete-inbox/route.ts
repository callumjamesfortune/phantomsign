import { NextRequest, NextResponse } from 'next/server';
import supabaseServerClient from '../../../lib/supabaseServerClient';
import { validateApiKey } from '../../../lib/apiKeyValidator';

export async function DELETE(req: NextRequest) {
  try {
    const { inbox } = await req.json();
    if (!inbox) {
      return NextResponse.json({ error: 'No inbox provided' }, { status: 400 });
    }

    // Validate the API key
    const apiKeyValidation = await validateApiKey(req);
    if (!apiKeyValidation.valid) {
      return apiKeyValidation.response;
    }

    // Fetch the generated email details
    const { data: generatedEmail, error: emailError } = await supabaseServerClient
      .from('generated_emails')
      .select('generated_by')
      .eq('email', inbox)
      .single();

    if (emailError || !generatedEmail) {
      return NextResponse.json({ error: 'Inbox not found' }, { status: 404 });
    }

    // Check if the email was generated by the same user as the API key or if the request came from the same origin
    if ((apiKeyValidation.user_id && generatedEmail.generated_by !== apiKeyValidation.user_id) && !apiKeyValidation.referrer_valid) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // Delete the email from the generated_emails table
    const { error: deleteGeneratedError } = await supabaseServerClient
      .from('generated_emails')
      .delete()
      .eq('email', inbox);

    if (deleteGeneratedError) throw deleteGeneratedError;

    // Delete the corresponding emails from the incoming_emails table
    const { error: deleteIncomingError } = await supabaseServerClient
      .from('incoming_emails')
      .delete()
      .eq('email', inbox);

    if (deleteIncomingError) throw deleteIncomingError;

    return NextResponse.json({ message: 'Inbox deleted' }, { status: 200 });
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
